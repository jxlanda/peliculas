import 'dart:async';
import 'package:http/http.dart' as http;
import 'package:peliculas/src/models/actores_model.dart';
import 'package:peliculas/src/models/pelicula_model.dart';

class PeliculaProvider {

  String _apikey = "API_KEY";
  String _url = "api.themoviedb.org";
  String _urlImg = "https://image.tmdb.org/t/p/w500";
  String _language = "es-MX";

  int _popularesPage = 0;
  bool _cargando = false;

  int _upcomingPage = 0;
  bool _cargandoUpcoming = false;

  List<Result> _populares = new List();
  List<Result> _upcoming = new List();

  // Tuberia
  final _popularStreamController = StreamController<List<Result>>.broadcast();
  Function (List<Result>) get pupularSink => _popularStreamController.sink.add;
  Stream<List<Result>> get popularStream => _popularStreamController.stream;
  // Necesario para elimiar stream cuando no se necesite
  void disposeStream(){
    _popularStreamController?.close();
  }

  // Tuberia upcoming
  final _upcomingStreamController = new StreamController<List<Result>>.broadcast();
  Function (List<Result>) get upcomingSink => _upcomingStreamController.sink.add;
  Stream<List<Result>> get upcomingStream => _upcomingStreamController.stream;
  
  void disposeUpcomingStream(){
    _upcomingStreamController?.close();
  }

  Future<List<Result>> _procesarRespuesta(Uri url) async {
    final resp = await http.get(url);
    // final decodeData = json.decode(resp.body);
    final pelicula = peliculaFromJson(resp.body);
    // print(peliculaToJson(pelicula));
    return pelicula.results;
  }

  Future<List<Result>> getNowPlaying() async {
    // Primer argumento url sin http, el segundo el path de la peticion, el tercero son los parametros
    final url = Uri.https(_url, "3/movie/now_playing",
        {'api_key': _apikey, 'language': _language});
    return await _procesarRespuesta(url);
  }

  Future<List<Result>> getPopular() async {
    if(_cargando) return [];
    print("cargando");
    _cargando = true;

    _popularesPage ++;
    final url = Uri.https(_url, "3/movie/popular",
        {'api_key': _apikey, 'language': _language, 'page': _popularesPage.toString()});
    final resp = await _procesarRespuesta(url);

    // Anadir informacion al sink
    _populares.addAll(resp);
    pupularSink(_populares);
    _cargando = false;
    return resp;
  }

   Future<List<Result>> getUpcoming() async {
     
    if(_cargandoUpcoming) return [];
    print("cargando Upcoming...");
    _cargandoUpcoming = true;

    _upcomingPage++;
    final url = Uri.https(_url, "3/movie/upcoming",
        {'api_key': _apikey, 'language': _language, 'page': _upcomingPage.toString()});
    final resp = await _procesarRespuesta(url);

    // Anadir informacion al sink
    _upcoming.addAll(resp);
    upcomingSink(_upcoming);
    _cargandoUpcoming = false;
    return resp;
  }

  String getPeliculaImage(String img){
    return (img == null)?  "null": "$_urlImg$img";
  }

  Future<List<Cast>> getActores(String peliculaId) async {
    final url = Uri.https(_url, "3/movie/$peliculaId/credits",
        {'api_key': _apikey, 'language': _language });

    final resp = await http.get(url);
    final actores = actoresFromJson(resp.body);
    return actores.cast;
  }

  Future<List<Result>> getMovieById(String busqueda) async {
    final url = Uri.https(_url, "3/search/movie",
        {'api_key': _apikey, 'language': _language, "query": busqueda});
    return await _procesarRespuesta(url);
  }

}
